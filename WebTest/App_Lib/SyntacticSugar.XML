<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SyntacticSugar</name>
    </assembly>
    <members>
        <member name="T:SyntacticSugar.ClassGenerating">
            <summary>
            ** 描述：实体生成类
            ** 创始时间：2015-4-17
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** qq：610262374 欢迎交流,共同提高 ,命名语法等写的不好的地方欢迎大家的给出宝贵建议
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4482152.html
            </summary>
        </member>
        <member name="M:SyntacticSugar.ClassGenerating.DynamicToClass(System.Object,System.String)">
            <summary>
            根据匿名类获取实体类的字符串
            </summary>
            <param name="entity">匿名对象</param>
            <param name="className">生成的类名</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.ClassGenerating.DataTableToClass(System.Data.DataTable,System.String)">
            <summary>
            根据DataTable获取实体类的字符串
            </summary>
            <param name="sql"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.ClassGenerating.SqlToClass(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             根据SQL语句获取实体类的字符串
            </summary>
            <param name="sql">SQL语句</param>
            <param name="className">生成的类名</param>
            <param name="server">服务名</param>
            <param name="database">数据库名称</param>
            <param name="uid">账号</param>
            <param name="pwd">密码</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.ClassGenerating.SqlToClass(System.String,System.String,System.String)">
            <summary>
             根据SQL语句获取实体类的字符串
            </summary>
            <param name="sql">SQL语句</param>
            <param name="className">生成的类名</param>
            <param name="connName">webconfig的connectionStrings name</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.ClassGenerating.ChangeType(System.Type)">
            <summary>
            匹配类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:SyntacticSugar.UploadFile">
            <summary>
            ** 描述：单文件上传类 (暂时不支持多文件上传)
            ** 创始时间：2015-5-27
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4533954.html
            </summary>
        </member>
        <member name="M:SyntacticSugar.UploadFile.SetFileDirectory(System.String)">
            <summary>
            文件保存路径(默认:/upload)
            </summary>
        </member>
        <member name="M:SyntacticSugar.UploadFile.SetIsUseOldFileName(System.Boolean)">
            <summary>
            是否使用原始文件名作为新文件的文件名(默认:true)
            </summary>
            <param name="isUseOldFileName">true原始文件名,false系统生成新文件名</param>
        </member>
        <member name="M:SyntacticSugar.UploadFile.SetFileType(System.String)">
            <summary>
            允许上传的文件类型, 逗号分割,必须全部小写! *表示所有 (默认值: .pdf,.xls,.xlsx,.doc,.docx,.txt,.png,.jpg,.gif )  
            </summary>
        </member>
        <member name="M:SyntacticSugar.UploadFile.SetMaxSizeM(System.Double)">
            <summary>
            允许上传多少大小(单位：M)
            </summary>
        </member>
        <member name="M:SyntacticSugar.UploadFile.SetIsRenameSameFile(System.Boolean)">
            <summary>
            重命名同名文件？ 
            </summary>
            <param name="isRenameSameFile">true:重命名,false覆盖</param>
        </member>
        <member name="M:SyntacticSugar.UploadFile.Save(System.Web.HttpPostedFile)">
            <summary>
            保存表单文件
            </summary>
            <param name="postFile">HttpPostedFile</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.UploadFile.Save(System.Web.HttpPostedFile,System.String)">
            <summary>
            保存表单文件,根据编号创建子文件夹
            </summary>
            <param name="postFile">HttpPostedFile</param>
            <param name="number">编号</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.UploadFile.CommonSave(System.Web.HttpPostedFile)">
            <summary>
            保存表单文件,根据HttpPostedFile
            </summary>
            <param name="postFile">HttpPostedFile</param>
            <param name="isRenameSameFile">值为true 同名文件进行重命名，false覆盖原有文件</param>
            <param name="fileName">新的文件名</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.UploadFile.GetRelativePath(System.String)">
            <summary>
            根据物理路径获取相对路径
            </summary>
            <param name="fileDirectory"></param>
            <param name="sever"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.UploadFile.GetDirectory(System.String@)">
            <summary>
            获取目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.UploadFile.CheckingType(SyntacticSugar.UploadFile.ResponseMessage,System.String)">
            <summary>
            验证文件类型)
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:SyntacticSugar.UploadFile.TryError(SyntacticSugar.UploadFile.ResponseMessage,System.String)">
            <summary>
            抛出错误
            </summary>
            <param name="Msg"></param>
        </member>
        <member name="P:SyntacticSugar.UploadFile.ParamsModel.FileDirectory">
            <summary>
            文件保存路径
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadFile.ParamsModel.FileType">
            <summary>
            允许上传的文件类型, 逗号分割,必须全部小写!
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadFile.ParamsModel.MaxSizeM">
            <summary>
            允许上传多少大小
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadFile.ParamsModel.PathSaveType">
            <summary>
            路径存储类型
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadFile.ParamsModel.IsRenameSameFile">
            <summary>
            重命名同名文件? 
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadFile.ParamsModel.IsUseOldFileName">
            <summary>
            是否使用原始文件名
            </summary>
        </member>
        <member name="T:SyntacticSugar.UploadFile.PathSaveType">
            <summary>
            路径存储类型
            </summary>
        </member>
        <member name="F:SyntacticSugar.UploadFile.PathSaveType.dateTimeNow">
            <summary>
            根据时间创建存储目录
            </summary>
        </member>
        <member name="F:SyntacticSugar.UploadFile.PathSaveType.code">
            <summary>
            根据ID编号方式来创建存储目录
            </summary>
        </member>
        <member name="T:SyntacticSugar.UploadFile.ResponseMessage">
            <summary>
            反回信息
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadFile.ResponseMessage.Error">
            <summary>
            上传错误
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadFile.ResponseMessage.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadFile.ResponseMessage.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadFile.ResponseMessage.WebFilePath">
            <summary>
            网站路径
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadFile.ResponseMessage.FileName">
            <summary>
            获取文件名
            </summary>
        </member>
        <member name="T:SyntacticSugar.TypeParseExtenions">
            <summary>
            ** 描述：类型转换
            ** 创始时间：2015-6-2
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4548028.html
            </summary>
        </member>
        <member name="M:SyntacticSugar.TypeParseExtenions.TryToInt(System.Object)">
            <summary>
            强转成int 如果失败返回 0
            </summary>
            <param name="thisValue"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.TypeParseExtenions.TryToInt(System.Object,System.Int32)">
            <summary>
            强转成int 如果失败返回 errorValue
            </summary>
            <param name="thisValue"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.TypeParseExtenions.TryToMoney(System.Object)">
            <summary>
            强转成money 如果失败返回 0
            </summary>
            <param name="thisValue"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.TypeParseExtenions.TryToMoney(System.Object,System.Double)">
            <summary>
            强转成double 如果失败返回 errorValue
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.TypeParseExtenions.TryToString(System.Object)">
            <summary>
            强转成string 如果失败返回 ""
            </summary>
            <param name="thisValue"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.TypeParseExtenions.TryToString(System.Object,System.String)">
            <summary>
            强转成string 如果失败返回 str
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.TypeParseExtenions.TryToDecimal(System.Object)">
            <summary>
            强转成Decimal 如果失败返回 0
            </summary>
            <param name="thisValue"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.TypeParseExtenions.TryToDecimal(System.Object,System.Decimal)">
            <summary>
            强转成Decimal 如果失败返回 errorValue
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.TypeParseExtenions.TryToDate(System.Object)">
            <summary>
            强转成DateTime 如果失败返回 DateTime.MinValue
            </summary>
            <param name="thisValue"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.TypeParseExtenions.TryToDate(System.Object,System.DateTime)">
            <summary>
            强转成DateTime 如果失败返回 errorValue
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.TypeParseExtenions.JsonToModel``1(System.String)">
            <summary>
            将json序列化为实体
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.TypeParseExtenions.ModelToJson``1(``0)">
            <summary>
            将实体序列化为json
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.TypeParseExtenions.ListToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            将集合类转换成DataTable
            </summary>
            <param name="list">集合</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.TypeParseExtenions.DataTableToList``1(System.Data.DataTable)">
            <summary>
            将datatable转为list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:SyntacticSugar.StringSugar">
            <summary>
            ** 描述：string操作类
            ** 创始时间：2015-6-30
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：
            </summary>
        </member>
        <member name="M:SyntacticSugar.StringSugar.ToFormat(System.String,System.Object[])">
            <summary>
            获取格式化字符串,等同于string.Format
            </summary>
            <param name="value"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.StringSugar.ToCutString(System.String,System.Int32,System.String)">
            <summary>
            截取字符。不区分中英文
            </summary>
            <param name="value"></param>
            <param name="cutLength"></param>
            <param name="bdot"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.StringSugar.ToHtmlDecode(System.String)">
            <summary>
            对 HTML 编码的字符串进行解码，并返回已解码的字符串。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.StringSugar.ToHtmlEncode(System.String)">
            <summary>
              对字符串进行 HTML 编码并返回已编码的字符串。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.StringSugar.ToUrlDecode(System.String)">
            <summary>
            对字符串进行 URL 解码并返回已解码的字符串。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.StringSugar.ToUrlEncode(System.String)">
            <summary>
             对字符串进行 URL 编码，并返回已编码的字符串。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.StringSugar.ToHtmlByText(System.String)">
            <summary>
            将文本转换成html
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:SyntacticSugar.GenerateRandomString">
            <summary>
            ** 描述：根据条件生成随机字符串
            ** 创始时间：2010-2-28
            ** 修改时间：-
            ** 修改人：sunkaixuan
            ** 使用说明： 
            </summary>
        </member>
        <member name="M:SyntacticSugar.GenerateRandomString.GetRandChineseString(System.Int32)">
            <summary>
            获取随机汉字数组
            </summary>
            <param name="strlength">字符长度</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.GenerateRandomString.GetRandChineseChar">
            <summary>
            获取随机汉字数组
            </summary>
            <param name="strlength">数组长度</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.GenerateRandomString.GetRandStringByPattern(System.String)">
            <summary>
            根据规则随机生成字符串
            </summary>
            <param name="pattern">样式："?"代表一个字符，"#"代表一个一位数字，"*"代表一个字符串或一个一位数字</param>
            <returns>随机字符串</returns>
        </member>
        <member name="M:SyntacticSugar.GenerateRandomString.GetFormatedNumeric(System.Int32,System.Int32)">
            <summary>
            生成随机的数值
            </summary>
            <param name="min">随机数可取该下界值</param>
            <param name="max">随机数的上界</param>
            <returns>随机的数值</returns>
        </member>
        <member name="M:SyntacticSugar.GenerateRandomString.GetRandomString(System.String,System.Int32)">
            <summary>
            获取指定长度和字符的随机字符串
            通过调用 Random 类的 Next() 方法，先获得一个大于或等于 0 而小于 pwdchars 长度的整数
            以该数作为索引值，从可用字符串中随机取字符，以指定的密码长度为循环次数
            依次连接取得的字符，最后即得到所需的随机密码串了。
            </summary>
            <param name="pwdchars">随机字符串里包含的字符</param>
            <param name="pwdlen">随机字符串的长度</param>
            <returns>随机产生的字符串</returns>
        </member>
        <member name="M:SyntacticSugar.GenerateRandomString.GetRandomString(System.Int32)">
            <summary>
            获取指定长度的随机字符串
            </summary>
            <param name="pwdlen">随机字符串的长度</param>
            <returns>随机产生的字符串</returns>
        </member>
        <member name="M:SyntacticSugar.GenerateRandomString.GetRandWord(System.Int32)">
            <summary>
            获取指定长度的纯字母随机字符串
            </summary>
            <param name="pwdlen">数字串长度</param>
            <returns>纯字母随机字符串</returns>
        </member>
        <member name="M:SyntacticSugar.GenerateRandomString.GetRandomNum(System.Int32)">
            <summary>
            获取指定长度的纯数字随机数字串
            </summary>
            <param name="intlong">数字串长度</param>
            <returns>纯数字随机数字串</returns>
        </member>
        <member name="M:SyntacticSugar.GenerateRandomString.GetFileRndName">
            <summary>
            获取按照年月时分秒随机数生成的文件名
            </summary>
            <returns>随机文件名</returns>
        </member>
        <member name="T:SyntacticSugar.IsWhatExtenions">
            <summary>
            ** 描述：逻辑判段是什么？
            ** 创始时间：2015-5-29
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4539654.html
            </summary>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            值在的范围？
            </summary>
            <param name="thisValue"></param>
            <param name="begin">大于等于begin</param>
            <param name="end">小于等于end</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsInRange(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            值在的范围？
            </summary>
            <param name="thisValue"></param>
            <param name="begin">大于等于begin</param>
            <param name="end">小于等于end</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsIn``1(``0,``0[])">
            <summary>
            在里面吗?
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsContainsIn(System.String,System.String[])">
            <summary>
            在里面吗?
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsNullOrEmpty(System.Object)">
            <summary>
            是null或""?
            </summary>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsNullOrEmpty(System.Nullable{System.Guid})">
            <summary>
            是null或""?
            </summary>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsNullOrEmpty(System.Guid)">
            <summary>
            是null或""?
            </summary>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsValuable(System.Object)">
            <summary>
            有值?(与IsNullOrEmpty相反)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsValuable(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            有值?(与IsNullOrEmpty相反)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsZero(System.Object)">
            <summary>
            是零?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsInt(System.Object)">
            <summary>
            是INT?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsNoInt(System.Object)">
            <summary>
            不是INT?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsMoney(System.Object)">
            <summary>
            是金钱?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsDate(System.Object)">
            <summary>
            是时间?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsEamil(System.Object)">
            <summary>
            是邮箱?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsMobile(System.Object)">
            <summary>
            是手机?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsTelephone(System.Object)">
            <summary>
            是座机?
            </summary>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsIDcard(System.Object)">
            <summary>
            是身份证?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsFax(System.Object)">
            <summary>
            是传真?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IsWhatExtenions.IsMatch(System.Object,System.String)">
             <summary>
            是适合正则匹配?
             </summary>
             <param name="thisValue"></param>
             <param name="begin">大于等于begin</param>
             <param name="end">小于等于end</param>
             <returns></returns>
        </member>
        <member name="T:SyntacticSugar.ValidationSugar">
            <summary>
            ** 描述：可以方便实现前后端双验证,基于jquery
            ** 创始时间：2015-6-4
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4558205.html
            ** git: http://git.oschina.net/sunkaixuan/ValidationSuarMVC
            </summary>
        </member>
        <member name="M:SyntacticSugar.ValidationSugar.Init(System.String,SyntacticSugar.ValidationSugar.OptionItem[])">
            <summary>
            前台注入
            </summary>
            <param name="pageKey"></param>
            <param name="itemList"></param>
        </member>
        <member name="M:SyntacticSugar.ValidationSugar.PostValidation(System.String,System.String@,System.Action)">
            <summary>
            后台验证
            </summary>
            <param name="pageKey"></param>
            <param name="errorMessage">json格式</param>
            <returns></returns>
        </member>
        <member name="F:SyntacticSugar.ValidationSugar.OptionItemType.Mobile">
            <summary>
            移动电话
            </summary>
        </member>
        <member name="F:SyntacticSugar.ValidationSugar.OptionItemType.Telephone">
            <summary>
            座机
            </summary>
        </member>
        <member name="F:SyntacticSugar.ValidationSugar.OptionItemType.Regex">
            <summary>
            没有合适的，请使用正则验证
            </summary>
        </member>
        <member name="F:SyntacticSugar.ValidationSugar.OptionItemType.Func">
            <summary>
            函数验证
            </summary>
        </member>
        <member name="T:SyntacticSugar.ValidationSugar.OptionItem">
            <summary>
            验证选项
            </summary>
        </member>
        <member name="P:SyntacticSugar.ValidationSugar.OptionItem.IsRequired">
            <summary>
            是否必填
            </summary>
        </member>
        <member name="P:SyntacticSugar.ValidationSugar.OptionItem.FormFiledName">
            <summary>
            表单字段名(name或者id)
            </summary>
        </member>
        <member name="P:SyntacticSugar.ValidationSugar.OptionItem.Placeholder">
            <summary>
            水印
            </summary>
        </member>
        <member name="P:SyntacticSugar.ValidationSugar.OptionItem.IsMultiselect">
            <summary>
            是多选吗? 默认false
            </summary>
        </member>
        <member name="P:SyntacticSugar.ValidationSugar.OptionItem.TypeParams">
            <summary>
            验证类型参数
            </summary>
        </member>
        <member name="T:SyntacticSugar.ValidationSugar.OptionItemTypeParams">
            <summary>
            验证类型参数
            </summary>
        </member>
        <member name="P:SyntacticSugar.ValidationSugar.OptionItemTypeParams.Type">
            <summary>
            验证类型
            </summary>
        </member>
        <member name="P:SyntacticSugar.ValidationSugar.OptionItemTypeParams.Pattern">
            <summary>
            正则
            </summary>
        </member>
        <member name="P:SyntacticSugar.ValidationSugar.OptionItemTypeParams.Tip">
            <summary>
            提醒
            </summary>
        </member>
        <member name="P:SyntacticSugar.ValidationSugar.OptionItemTypeParams.Func">
            <summary>
            函数
            </summary>
        </member>
        <member name="M:SyntacticSugar.IEnumerableExtensions.TryForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            foreach 用法:xx.ForEach(i=>{  })
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="?"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.IEnumerableExtensions.TryForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            foreach 用法:xx.ForEach({  })
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="?"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:SyntacticSugar.CacheManager`1">
            <summary>
            ** 描述：缓存操作类
            ** 创始时间：2015-6-9
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4563462.html
            </summary>
            <typeparam name="K">键</typeparam>
            <typeparam name="V">值</typeparam>
        </member>
        <member name="M:SyntacticSugar.CacheManager`1.ContainsKey(System.String)">
            <summary>         
            key是否存在       
            </summary>         
            <param name="key">key</param>         
            <returns> /// 	存在<c>true</c> 不存在<c>false</c>.        /// /// </returns>         
        </member>
        <member name="M:SyntacticSugar.CacheManager`1.Get(System.String)">
            <summary>         
            获取缓存值         
            </summary>         
            <param name="key">key</param>         
            <returns></returns>         
        </member>
        <member name="M:SyntacticSugar.CacheManager`1.GetInstance">
            <summary>         
            获取实例 （单例模式）       
            </summary>         
            <returns></returns>         
        </member>
        <member name="M:SyntacticSugar.CacheManager`1.Add(System.String,`0)">
            <summary>         
            插入缓存(默认20分钟)        
            </summary>         
            <param name="key"> key</param>         
            <param name="value">value</param>          
        </member>
        <member name="M:SyntacticSugar.CacheManager`1.Add(System.String,`0,System.Int32)">
            <summary>         
            插入缓存        
            </summary>         
            <param name="key"> key</param>         
            <param name="value">value</param>         
            <param name="cacheDurationInSeconds">过期时间单位秒</param>         
        </member>
        <member name="M:SyntacticSugar.CacheManager`1.Add(System.String,`0,System.Int32,System.Web.Caching.CacheItemPriority)">
            <summary>         
            插入缓存.         
            </summary>         
            <param name="key">key</param>         
            <param name="value">value</param>         
            <param name="cacheDurationInSeconds">过期时间单位秒</param>         
            <param name="priority">缓存项属性</param>         
        </member>
        <member name="M:SyntacticSugar.CacheManager`1.Add(System.String,`0,System.Int32,System.Web.Caching.CacheDependency,System.Web.Caching.CacheItemPriority)">
            <summary>         
            插入缓存.         
            </summary>         
            <param name="key">key</param>         
            <param name="value">value</param>         
            <param name="cacheDurationInSeconds">过期时间单位秒</param>         
            <param name="priority">缓存项属性</param>         
        </member>
        <member name="M:SyntacticSugar.CacheManager`1.Remove(System.String)">
            <summary>         
            删除缓存         
            </summary>         
            <param name="key">key</param>         
        </member>
        <member name="M:SyntacticSugar.CacheManager`1.RemoveAll">
            <summary>
            清除所有缓存
            </summary>
        </member>
        <member name="M:SyntacticSugar.CacheManager`1.RemoveAll(System.Func{System.String,System.Boolean})">
            <summary>
            清除所有包含关键字的缓存
            </summary>
            <param name="removeKey">关键字</param>
        </member>
        <member name="M:SyntacticSugar.CacheManager`1.GetAllKey">
            <summary>
            获取所有缓存key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.CacheManager`1.CreateKey(System.String)">
             <summary>         
            创建KEY   
             </summary>         
             <param name="key">Key</param>         
             <returns></returns>         
        </member>
        <member name="P:SyntacticSugar.CacheManager`1.Item(System.String)">
             <summary>         
            根据key获取value     
             </summary>         
             <value></value>      
        </member>
        <member name="T:SyntacticSugar.LogicSugarExtenions">
            <summary>
            ** 描述：逻辑糖来简化你的代码
            ** 创始时间：2015-6-1
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4545338.html
            </summary>
        </member>
        <member name="M:SyntacticSugar.LogicSugarExtenions.IIF``1(System.Boolean,``0,``0)">
            <summary>
            根据表达式的值，来返回两部分中的其中一个。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <param name="trueValue">值为true返回 trueValue</param>
            <param name="falseValue">值为false返回 falseValue</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.LogicSugarExtenions.IIF(System.Boolean,System.String)">
            <summary>
            根据表达式的值,true返回trueValue,false返回string.Empty;
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <param name="trueValue">值为true返回 trueValue</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.LogicSugarExtenions.IIF(System.Boolean,System.Int32)">
            <summary>
            根据表达式的值,true返回trueValue,false返回0
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <param name="trueValue">值为true返回 trueValue</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.LogicSugarExtenions.IIF``1(System.Nullable{System.Boolean},``0,``0)">
            <summary>
            根据表达式的值，来返回两部分中的其中一个。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <param name="trueValue">值为true返回 trueValue</param>
            <param name="falseValue">值为false返回 falseValue</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.LogicSugarExtenions.And(System.Boolean,System.Boolean[])">
            <summary>
            所有值为true，则返回true否则返回false
            </summary>
            <param name="thisValue"></param>
            <param name="andValues"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.LogicSugarExtenions.Or(System.Boolean,System.Boolean[])">
            <summary>
            只要有一个值为true,则返回true否则返回false
            </summary>
            <param name="thisValue"></param>
            <param name="andValues"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.LogicSugarExtenions.Switch``1(``0)">
            <summary>
            Switch().Case().Default().Break()
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="T:SyntacticSugar.MailSmtp">
            <summary>
            ** 描述：邮件发送
            ** 创始时间：2015-6-8
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4562147.html
            </summary>
        </member>
        <member name="M:SyntacticSugar.MailSmtp.SetEncoding(System.Text.Encoding)">
            <summary>
            设置邮件编码类型
            </summary>
            <param name="contentEncoding"></param>
        </member>
        <member name="M:SyntacticSugar.MailSmtp.SetIsHtml(System.Boolean)">
             <summary>
            设置邮件正文是否为 Html 格式 
             </summary>
             <param name="isHtml"></param>
        </member>
        <member name="M:SyntacticSugar.MailSmtp.SetCC(System.String[])">
            <summary>
            抄送
            </summary>
            <param name="cc"></param>
        </member>
        <member name="M:SyntacticSugar.MailSmtp.SetBC(System.String[])">
            <summary>
            暗送
            </summary>
            <param name="cc"></param>
        </member>
        <member name="M:SyntacticSugar.MailSmtp.SetIsSSL(System.Boolean)">
            <summary>
            是否ssl加密
            </summary>
            <param name="isSSL"></param>
        </member>
        <member name="M:SyntacticSugar.MailSmtp.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="host"></param>
            <param name="username">邮件账号</param>
            <param name="password">密码</param>
        </member>
        <member name="M:SyntacticSugar.MailSmtp.Send(System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人邮件地址</param>
            <param name="sender">发件人显示名称</param>
            <param name="to">收件人地址</param>
            <param name="subject">邮件标题</param>
            <param name="body">邮件正文</param>
            <param name="file">附件地址数组</param>
            <returns>bool 是否成功 </returns>
        </member>
        <member name="M:SyntacticSugar.MailSmtp.Send(System.String,System.String,System.String[],System.String,System.String,System.String[])">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人邮件地址</param>
            <param name="sender">发件人显示名称</param>
            <param name="to">收件人地址</param>
            <param name="subject">邮件标题</param>
            <param name="body">邮件正文</param>
            <param name="file">附件地址数组</param>
            <returns>bool 是否成功 </returns>
        </member>
        <member name="P:SyntacticSugar.MailSmtp.Result">
            <summary>
            获取发送结果，成功则为空
            </summary>
        </member>
        <!-- 对于成员“T:SyntacticSugar.PageString”忽略有格式错误的 XML 注释 -->
        <member name="M:SyntacticSugar.PageString.SetIsEnglish(System.Boolean)">
            <summary>
            是否是英文      (默认：false)
            </summary>
        </member>
        <member name="M:SyntacticSugar.PageString.SetIsShowText(System.Boolean)">
            <summary>
            是否显示分页文字(默认：true)
            </summary>
        </member>
        <member name="M:SyntacticSugar.PageString.SetClassName(System.String)">
            <summary>
            样式            (默认:"pagination")
            </summary>
        </member>
        <member name="M:SyntacticSugar.PageString.SetPageIndexName(System.String)">
            <summary>
            分页参数名      (默认:"pageIndex")
            </summary>
        </member>
        <member name="M:SyntacticSugar.PageString.SetIsAjax(System.Boolean)">
            <summary>
            是否是异步 同步 href='' 异步 onclick=ajaxPage()    (默认:false)
            </summary>
        </member>
        <member name="M:SyntacticSugar.PageString.SetTextFormat(System.String)">
            <summary>
            自定义文字
            string.Format("{0}{1}{2}","总记录数","当前页数","总页数")
            默认值：《span class=\"pagetext\"》《strong》总共《/strong》:{0} 条 《strong》当前《/strong》:{1}/{2}《/span》
            </summary>
        </member>
        <member name="M:SyntacticSugar.PageString.ToPageString(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            分页算法＜一＞共20页 首页 上一页  1  2  3  4  5  6  7  8  9  10  下一页  末页 
            </summary>
            <param name="total">总记录数</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页数</param>
            <param name="query_string">Url参数</param>
            <returns></returns>
        </member>
        <member name="P:SyntacticSugar.PageString.ParamsModel.IsEnglish">
            <summary>
            是否是英文      (默认：false)
            </summary>
        </member>
        <member name="P:SyntacticSugar.PageString.ParamsModel.IsShowText">
            <summary>
            是否显示分页文字(默认：true)
            </summary>
        </member>
        <member name="P:SyntacticSugar.PageString.ParamsModel.ClassName">
            <summary>
            样式            (默认:"pagination")
            </summary>
        </member>
        <member name="P:SyntacticSugar.PageString.ParamsModel.PageIndexName">
            <summary>
            分页参数名      (默认:"pageIndex")
            </summary>
        </member>
        <member name="P:SyntacticSugar.PageString.ParamsModel.IsAjax">
            <summary>
            是否是异步 同步 href='' 异步 onclick=ajaxPage()    (默认:false)
            </summary>
        </member>
        <member name="P:SyntacticSugar.PageString.ParamsModel.TextFormat">
            <summary>
            自定义文字
            string.Format("{0}{1}{2}","总记录数","当前页数","总页数")
            默认值：《span class=\"pagetext\"》《strong》总共《/strong》:{0} 条 《strong》当前《/strong》:{1}/{2}《/span》
            </summary>
        </member>
        <member name="T:SyntacticSugar.XHtmlElement">
            <summary>
            ** 描述：html解析类
            ** 创始时间：2015-4-23
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** qq：610262374 欢迎交流,共同提高 ,命名语法等写的不好的地方欢迎大家的给出宝贵建议
            ** 使用说明:http://www.cnblogs.com/sunkaixuan/p/4482121.html
            </summary>
        </member>
        <member name="M:SyntacticSugar.XHtmlElement.Descendants(System.String)">
            <summary>
            获取最近的相同层级的HTML元素
            </summary>
            <param name="elementName">等于null为所有元素</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.XHtmlElement.RootDescendants(System.String)">
            <summary>
            获取第一级元素
            </summary>
            <param name="elementName"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.XHtmlElementExtendsion.Descendants(System.Collections.Generic.IEnumerable{SyntacticSugar.HtmlInfo},System.String)">
            <summary>
            获取最近的相同层级的HTML元素
            </summary>
            <param name="elementName">等于null为所有元素</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.XHtmlElementExtendsion.ChildDescendants(System.Collections.Generic.IEnumerable{SyntacticSugar.HtmlInfo},System.String)">
            <summary>
            获取下级元素
            </summary>
            <param name="elementName"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.XHtmlElementExtendsion.ParentDescendant(System.Collections.Generic.IEnumerable{SyntacticSugar.HtmlInfo},System.String)">
            <summary>
            获取父级
            </summary>
            <param name="htmlInfoList"></param>
            <returns></returns>
        </member>
        <member name="T:SyntacticSugar.HtmlInfo">
            <summary>
            html信息类
            </summary>
        </member>
        <member name="P:SyntacticSugar.HtmlInfo.TagName">
            <summary>
            元素名
            </summary>
        </member>
        <member name="P:SyntacticSugar.HtmlInfo.Attributes">
            <summary>
            元素属性
            </summary>
        </member>
        <member name="P:SyntacticSugar.HtmlInfo.InnerHtml">
            <summary>
            元素内部html
            </summary>
        </member>
        <member name="P:SyntacticSugar.HtmlInfo.FullHtml">
            <summary>
            得到元素的html
            </summary>
            <returns></returns>
        </member>
        <member name="T:SyntacticSugar.PerformanceTest">
            <summary>
            ** 描述：程序性能测试类
            ** 创始时间：2015-5-30
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4540840.html
            </summary>
        </member>
        <member name="M:SyntacticSugar.PerformanceTest.SetCount(System.Int32)">
             <summary>
            设置执行次数(默认:1)
             </summary>
        </member>
        <member name="M:SyntacticSugar.PerformanceTest.SetIsMultithread(System.Boolean)">
            <summary>
            设置线程模式(默认:false)
            </summary>
            <param name="isMul">true为多线程</param>
        </member>
        <member name="M:SyntacticSugar.PerformanceTest.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:SyntacticSugar.PerformanceTest.Execute(System.Action{System.Int32},System.Action{System.String},System.String)">
            <summary>
            执行函数
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:SyntacticSugar.FileSugar">
            <summary>
            ** 描述：文件公共类
            ** 创始时间：2010-2-28
            ** 修改时间：-
            ** 修改人：sunkaixuan
            ** 使用说明：
            </summary>
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetFiePathAndCreateDirectoryByCode``1(System.String,``0,System.String)">
            <summary>
            根据文件目录、编号、文件名生成文件路径，并且创建文件存放目录
            格式为:/directory/code/filename
            </summary>
            <typeparam name="T"></typeparam>
            <param name="directory"></param>
            <param name="code"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetFiePathAndCreateDirectoryByDate``1(System.String,System.String)">
            <summary>
            根据文件目录、日期、文件名生成文件路径，并且创建文件存放目录
            格式为:/directory/2015/01/01/filename
            </summary>
            <typeparam name="T"></typeparam>
            <param name="directory"></param>
            <param name="code"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetMapPath(System.String)">
            <summary>
            获得当前绝对路径
            </summary>
            <param name="strPath">指定的路径</param>
            <returns>绝对路径</returns>
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetMinPic(System.String,System.String,System.Int32)">
            <summary>
            获取缩略图片路径
            </summary>
            <param name="dir"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:SyntacticSugar.FileSugar.sync">
            <summary>
            同步标识
            </summary>
        </member>
        <member name="M:SyntacticSugar.FileSugar.IsExistDirectory(System.String)">
            <summary>
            检测指定目录是否存在
            </summary>
            <param name="directoryPath">目录的绝对路径</param>        
        </member>
        <member name="M:SyntacticSugar.FileSugar.IsExistFile(System.String)">
            <summary>
            检测指定文件是否存在,如果存在则返回true。
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:SyntacticSugar.FileSugar.IsEmptyDirectory(System.String)">
            <summary>
            检测指定目录是否为空
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:SyntacticSugar.FileSugar.Contains(System.String,System.String)">
            <summary>
            检测指定目录中是否存在指定的文件,若要搜索子目录请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>        
        </member>
        <member name="M:SyntacticSugar.FileSugar.Contains(System.String,System.String,System.Boolean)">
            <summary>
            检测指定目录中是否存在指定的文件
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param> 
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.CreateDirectory(System.String)">
            <summary>
            创建一个目录
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.CreateFile(System.String)">
            <summary>
            创建一个文件
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.CreateFile(System.String,System.Byte[])">
            <summary>
            创建一个文件,并将字节流写入文件。
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="buffer">二进制流数据</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.CreateFile(System.String,System.String)">
            <summary>
            创建一个文件,并将字符串写入文件。
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="text">字符串数据</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.CreateFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            创建一个文件,并将字符串写入文件。
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="text">字符串数据</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.OpenDirectory(System.String)">
            <summary>
            打开目录
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.OpenFile(System.String)">
            <summary>
            打开文件
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetDirectoryFromFilePath(System.String)">
            <summary>
            从文件绝对路径中获取目录路径
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetLineCount(System.String)">
            <summary>
            获取文本文件的行数
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetFileSize(System.String)">
            <summary>
            获取一个文件的长度,单位为Byte
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetFileSizeByKB(System.String)">
            <summary>
            获取一个文件的长度,单位为KB
            </summary>
            <param name="filePath">文件的路径</param>        
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetFileSizeByMB(System.String)">
            <summary>
            获取一个文件的长度,单位为MB
            </summary>
            <param name="filePath">文件的路径</param>        
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetFileNames(System.String)">
            <summary>
            获取指定目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetFileNames(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetDirectories(System.String)">
            <summary>
            获取指定目录中所有子目录列表,若要搜索嵌套的子目录列表,请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetDirectories(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有子目录列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.WriteText(System.String,System.String)">
            <summary>
            向文本文件中写入内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="text">写入的内容</param>        
        </member>
        <member name="M:SyntacticSugar.FileSugar.WriteText(System.String,System.String,System.Text.Encoding)">
            <summary>
            向文本文件中写入内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="text">写入的内容</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.AppendText(System.String,System.String)">
            <summary>
            向文本文件的尾部追加内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="text">写入的内容</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.CopyTo(System.String,System.String)">
            <summary>
            将源文件的内容复制到目标文件中
            </summary>
            <param name="sourceFilePath">源文件的绝对路径</param>
            <param name="destFilePath">目标文件的绝对路径</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.MoveToDirectory(System.String,System.String)">
            <summary>
            将文件移动到指定目录( 剪切 )
            </summary>
            <param name="sourceFilePath">需要移动的源文件的绝对路径</param>
            <param name="descDirectoryPath">移动到的目录的绝对路径</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.Move(System.String,System.String)">
            <summary>
            将文件移动到指定目录，并指定新的文件名( 剪切并改名 )
            </summary>
            <param name="sourceFilePath">需要移动的源文件的绝对路径</param>
            <param name="descFilePath">目标文件的绝对路径</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.StreamToBytes(System.IO.Stream)">
            <summary>
            将流读取到缓冲区中
            </summary>
            <param name="stream">原始流</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.FileToBytes(System.String)">
            <summary>
            将文件读取到缓冲区中
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.FileToString(System.String)">
            <summary>
            将文件读取到字符串中
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.FileToString(System.String,System.Text.Encoding)">
            <summary>
            将文件读取到字符串中
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetFileName(System.String)">
            <summary>
            从文件的绝对路径中获取文件名( 包含扩展名 )
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetFileNameNoExtension(System.String)">
            <summary>
            从文件的绝对路径中获取文件名( 不包含扩展名 )
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetExtension(System.String)">
            <summary>
            从文件的绝对路径中获取扩展名
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:SyntacticSugar.FileSugar.ClearDirectory(System.String)">
            <summary>
            清空指定目录下所有文件及子目录,但该目录依然保存.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.ClearFile(System.String)">
            <summary>
            清空文件内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.DeleteFile(System.String)">
            <summary>
            删除指定文件
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.DeleteDirectory(System.String)">
            <summary>
            删除指定目录及其所有子目录
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.WriteFile(System.String,System.String)">
            <summary>
            写文件
            </summary>
            <param name="strFilePath"></param>
            <param name="strValue"></param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.WriteFile(System.String,System.String,System.String)">
            <summary>
            写文件
            </summary>
            <param name="strFilePath"></param>
            <param name="strValue"></param>
            <param name="charset"></param>
        </member>
        <member name="M:SyntacticSugar.FileSugar.ShowWord(System.String)">
            <summary>
            在网页中显示WORD文档
            </summary>
        </member>
        <member name="M:SyntacticSugar.FileSugar.GetFileSream(System.String)">
            <summary>
            根据路径得到文件流
            </summary>
            <param name="strFilePath"></param>
            <param name="strValue"></param>
        </member>
        <member name="T:SyntacticSugar.EncryptSugar">
            <summary>
            ** 描述：加密类
            ** 创始时间：2015-6-30
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4610729.html
            </summary>
        </member>
        <member name="M:SyntacticSugar.EncryptSugar.SetMaxCacheNum(System.Int32)">
            <summary>
            设置最大缓存条数,最小值为5(默认值：10000)
            </summary>
            <param name="i"></param>
        </member>
        <member name="F:SyntacticSugar.EncryptSugar._maxCacheNum">
            <summary>
            最大缓存条数
            </summary>
        </member>
        <member name="M:SyntacticSugar.EncryptSugar.GetInstance">
            <summary>
            对称加密类的构造函数
            </summary>
        </member>
        <member name="M:SyntacticSugar.EncryptSugar.Encrypto(System.String)">
            <summary>
            加密方法
            </summary>
            <param name="Source">待加密的串</param>
            <returns>经过加密的串</returns>
        </member>
        <member name="M:SyntacticSugar.EncryptSugar.Decrypto(System.String)">
            <summary>
            解密方法
            </summary>
            <param name="Source">待解密的串</param>
            <returns>经过解密的串</returns>
        </member>
        <member name="M:SyntacticSugar.EncryptSugar.MD5(System.String)">
            <summary>
            MD5加密,不可逆
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.EncryptSugar.GetLegalKey">
            <summary>
            获得密钥
            </summary>
            <returns>密钥</returns>
        </member>
        <member name="M:SyntacticSugar.EncryptSugar.GetLegalIV">
            <summary>
            获得初始向量IV
            </summary>
            <returns>初试向量IV</returns>
        </member>
        <member name="T:SyntacticSugar.SessionManager`1">
            <summary>
            ** 描述：session操作类
            ** 创始时间：2015-6-9
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4564612.html
            </summary>
            <typeparam name="K">键</typeparam>
            <typeparam name="V">值</typeparam>
        </member>
        <member name="T:SyntacticSugar.DataTableSugar">
            <summary>
            ** 描述：dataTable操作类
            ** 创始时间：2015-10-16
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** qq：610262374 欢迎交流,共同提高 ,命名语法等写的不好的地方欢迎大家的给出宝贵建议
            ** 使用说明: 
            </summary>
        </member>
        <member name="M:SyntacticSugar.DataTableSugar.CreateEasyTable(System.String[])">
            <summary>
            创建简单的dataTable
            </summary>
            <param name="columnNameArray"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.DataTableExtension.AddRow(System.Data.DataTable,System.Object[])">
            <summary>
            添加DataRow
            </summary>
            <param name="columnNameArray"></param>
            <returns></returns>
        </member>
        <member name="T:SyntacticSugar.ReflectionSugar">
            <summary>
            ** 描述：反射通用类
            ** 创始时间：2010-2-28
            ** 修改时间：-
            ** 修改人：sunkaixuan
            ** 使用说明： http://www.cnblogs.com/sunkaixuan/p/4635710.html
            </summary>
        </member>
        <member name="M:SyntacticSugar.ReflectionSugar.#ctor(System.Int32)">
            <summary>
            缓存时间，0为不缓存（默认值：0秒，单位：秒）
            </summary>
        </member>
        <member name="M:SyntacticSugar.ReflectionSugar.CreateInstance``1(System.String,System.String)">
            <summary>
            创建对象实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fullName">命名空间.类型名</param>
            <param name="assemblyName">程序集（dll名称）</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.ReflectionSugar.CreateInstance``1(System.String,System.String,System.String)">
            <summary>
            创建对象实例
            </summary>
            <typeparam name="T">要创建对象的类型</typeparam>
            <param name="assemblyName">类型所在程序集名称（dll名称）</param>
            <param name="nameSpace">类型所在命名空间</param>
            <param name="className">类型名</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.ReflectionSugar.LoadFile(System.String)">
            <summary>
            加载程序集
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.ReflectionSugar.GetTypeByAssembly(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            获取类型根据程序集
            </summary>
            <param name="asm">Assembly对象</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.ReflectionSugar.GetProperties(System.Type)">
            <summary>
            返回当前 System.Type 的所有公共属性。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.ReflectionSugar.ExecuteMethod(System.String,System.String,System.String,System.Object[])">
            <summary>
            根据字符执行方法
            </summary>
            <param name="nameSpace">命名空间</param>
            <param name="className">类名</param>
            <param name="MethodName">方法名</param>
            <param name="parameters">参数</param>
            <returns>返回object类型</returns>
        </member>
        <member name="M:SyntacticSugar.ReflectionSugar.Add``1(System.String,``0,System.Int32)">
            <summary>         
            插入缓存        
            </summary>         
            <param name="key"> key</param>         
            <param name="value">value</param>         
            <param name="cacheDurationInSeconds">过期时间单位秒</param>         
        </member>
        <member name="M:SyntacticSugar.ReflectionSugar.Add``1(System.String,``0,System.Int32,System.Web.Caching.CacheItemPriority)">
            <summary>         
            插入缓存.         
            </summary>         
            <param name="key">key</param>         
            <param name="value">value</param>         
            <param name="cacheDurationInSeconds">过期时间单位秒</param>         
            <param name="priority">缓存项属性</param>         
        </member>
        <member name="M:SyntacticSugar.ReflectionSugar.Add``1(System.String,``0,System.Int32,System.Web.Caching.CacheDependency,System.Web.Caching.CacheItemPriority)">
            <summary>         
            插入缓存.         
            </summary>         
            <param name="key">key</param>         
            <param name="value">value</param>         
            <param name="cacheDurationInSeconds">过期时间单位秒</param>         
            <param name="priority">缓存项属性</param>         
        </member>
        <member name="M:SyntacticSugar.ReflectionSugar.ContainsKey(System.String)">
            <summary>         
            key是否存在       
            </summary>         
            <param name="key">key</param>         
            <returns> /// 	存在<c>true</c> 不存在<c>false</c>.        /// /// </returns>         
        </member>
        <member name="M:SyntacticSugar.ReflectionSugar.Get``1(System.String)">
             <summary>         
            获取Cache根据key  
             </summary>                 
        </member>
        <!-- 对于成员“T:SyntacticSugar.ConfigSugar”忽略有格式错误的 XML 注释 -->
        <member name="M:SyntacticSugar.ConfigSugar.GetConfigString(System.String)">
            <summary>
            获得Web.config里的配置信息
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.ConfigSugar.GetAppString(System.String,System.String)">
            <summary>
            将配置信息转化为字符串
            </summary>
            <param name="key">AppSettings中的key</param>
            <param name="defaultValue">默认返回值</param>
            <returns>找到与key相应的值，则返回该值，否则返回默认值</returns>
        </member>
        <!-- 对于成员“M:SyntacticSugar.ConfigSugar.GetAppInt(System.String,System.Int32)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:SyntacticSugar.ConfigSugar.GetAppBool(System.String,System.Boolean)”忽略有格式错误的 XML 注释 -->
        <member name="T:SyntacticSugar.CookiesManager`1">
            <summary>
            ** 描述：cookies操作类
            ** 创始时间：2015-6-9
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4564799.html
            </summary>
            <typeparam name="V">值</typeparam>
        </member>
        <member name="M:SyntacticSugar.CookiesManager`1.GetInstance">
            <summary>         
            获取实例 （单例模式）       
            </summary>         
            <returns></returns>         
        </member>
        <member name="M:SyntacticSugar.CookiesManager`1.Add(System.String,`0)">
            <summary>
            添加cookies ,注意value最大4K (默认1天)
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:SyntacticSugar.CookiesManager`1.Add(System.String,`0,System.Int32)">
            <summary>
            添加cookies ,注意value最大4K
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cookiesDurationInSeconds">有效时间单位秒</param>
        </member>
        <member name="M:SyntacticSugar.CookiesManager`1.Add(System.String,`0,System.Int32,System.String,System.String)">
            <summary>
            添加cookies ,注意value最大4K
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cookiesDurationInSeconds">有效时间单位秒</param>
        </member>
        <member name="T:SyntacticSugar.RequestInfo">
            <summary>
            ** 描述：Request信息
            ** 创始时间：2015-6-30
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** 使用说明：
            </summary>
        </member>
        <member name="M:SyntacticSugar.RequestInfo.QueryString(System.String)">
            <summary>
            获取GET或POST参数
            </summary>
            <param name="parName"></param>
            <returns></returns>
        </member>
        <member name="P:SyntacticSugar.RequestInfo.Url">
            <summary>
            当前 HTTP 请求的完整 URL （包含参数信息）
            </summary>
        </member>
        <member name="P:SyntacticSugar.RequestInfo.HttpDomain">
            <summary>
            获取当前域名加HTTP
            </summary>
        </member>
        <member name="P:SyntacticSugar.RequestInfo.Domain">
            <summary>
            域名
            </summary>
        </member>
        <member name="P:SyntacticSugar.RequestInfo.Http">
            <summary>
            http or https
            </summary>
        </member>
        <member name="P:SyntacticSugar.RequestInfo.Page">
            <summary>
            当前 HTTP 请求的页面 URL 
            </summary>
        </member>
        <member name="P:SyntacticSugar.RequestInfo.PhysicalPath">
            <summary>
            物理路径
            </summary>
        </member>
        <member name="P:SyntacticSugar.RequestInfo.UserAddress">
            <summary>
            ip地址
            </summary>
        </member>
        <member name="T:SyntacticSugar.UploadImage">
            <summary>
            ** 描述：图片上传类、支持水印、缩略图
            ** 创始时间：2015-5-28
            ** 修改时间：-
            ** 修改人：sunkaixuan
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4536626.html
            </summary>
        </member>
        <member name="M:SyntacticSugar.UploadImage.FileCutSaveAs(System.Web.HttpPostedFile,System.String,System.Int32,System.Int32,SyntacticSugar.UploadImage.CutMode)">
            <summary>
            裁剪图片
            </summary>
            <param name="PostedFile">HttpPostedFile控件</param>
            <param name="SaveFolder">保存路径【sys.config配置路径】</param>
            <param name="oImgWidth">图片宽度</param>
            <param name="oImgHeight">图片高度</param>
            <param name="cMode">剪切类型</param>
            <returns>返回上传信息</returns>
        </member>
        <member name="M:SyntacticSugar.UploadImage.FileSaveAs(System.Web.HttpPostedFile,System.String)">
            <summary>
            通用图片上传类
            </summary>
            <param name="PostedFile">HttpPostedFile控件</param>
            <param name="SaveFolder">保存路径【sys.config配置路径】</param>
            <returns>返回上传信息</returns>
        </member>
        <member name="M:SyntacticSugar.UploadImage.CheckValidExt(System.String,System.String)">
            <summary>
            验证格式
            </summary>
            <param name="allType">所有格式</param>
            <param name="chkType">被检查的格式</param>
            <returns>bool</returns>
        </member>
        <member name="M:SyntacticSugar.UploadImage.CutRegion(System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            根据需要的图片尺寸，按比例剪裁原始图片
            </summary>
            <param name="nWidth">缩略图宽度</param>
            <param name="nHeight">缩略图高度</param>
            <param name="img">原始图片</param>
            <returns>剪裁区域尺寸</returns>
        </member>
        <member name="M:SyntacticSugar.UploadImage.CreateSmallPhoto(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            生成缩略图，不加水印
            </summary>
            <param name="filename">源文件</param>
            <param name="nWidth">缩略图宽度</param>
            <param name="nHeight">缩略图高度</param>
            <param name="destfile">缩略图保存位置</param>
        </member>
        <member name="M:SyntacticSugar.UploadImage.CreateSmallPhoto(System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            生成缩略图
            </summary>
            <param name="filename">源文件</param>
            <param name="nWidth">缩略图宽度</param>
            <param name="nHeight">缩略图高度</param>
            <param name="destfile">缩略图保存位置</param>
            <param name="png">图片水印</param>
            <param name="text">文本水印</param>
        </member>
        <member name="M:SyntacticSugar.UploadImage.AttachPng(System.String,System.String)">
            <summary>
             添加图片水印
             </summary>
             <param name="png">水印图片</param>
             <param name="file">原文件</param>
             <param name="position">水印图片的位置 0居中、1左上角、2右上角、3左下角、4右下角</param>
        </member>
        <member name="M:SyntacticSugar.UploadImage.GetCodecInfo(System.String)">
            <summary>
            保存JPG时用
            </summary>
            <param name="mimeType"> </param>
            <returns>得到指定mimeType的ImageCodecInfo </returns>
        </member>
        <member name="M:SyntacticSugar.UploadImage.KiSaveAsJPEG(System.String,System.String,System.Int32)">
            <summary>
            保存为JPEG格式，支持压缩质量选项
            </summary>
            <param name="SourceFile"></param>
            <param name="FileName"></param>
            <param name="Qty"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.UploadImage.CompressPhoto(System.String,System.Int32)">
            <summary>
            将图片压缩到指定大小
            </summary>
            <param name="FileName">待压缩图片</param>
            <param name="size">期望压缩后的尺寸</param>
        </member>
        <member name="M:SyntacticSugar.UploadImage.GetCodeMessage(System.Int32)">
            <summary>
            图片上传错误编码
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="P:SyntacticSugar.UploadImage.SetAllowFormat">
            <summary>
            允许图片格式 （例如： .jpg|.gif ）
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.SetAllowSize">
            <summary>
            允许上传图片大小 (单位:1M)
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.SetWordWater">
            <summary>
            文字水印字符
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.SetPicWater">
            <summary>
            图片水印
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.SetPositionWater">
            <summary>
            水印图片的位置 0居中、1左上角、2右上角、3左下角、4右下角
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.SetSmallImgWidth">
            <summary>
            缩略图宽度多个逗号格开（例如:200,100）
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.SetSmallImgHeight">
            <summary>
            缩略图高度多个逗号格开（例如:200,100）
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.SetLimitWidth">
            <summary>
            是否限制最大宽度，默认为true
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.SetMaxWidth">
            <summary>
            最大宽度尺寸，默认为600
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.SetCutImage">
            <summary>
            是否剪裁图片，默认true
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.SetMinWidth">
            <summary>
            限制图片最小宽度，0表示不限制
            </summary>
        </member>
        <member name="F:SyntacticSugar.UploadImage.CutMode.CutWH">
            <summary>
            根据高宽剪切
            </summary>
        </member>
        <member name="F:SyntacticSugar.UploadImage.CutMode.CutW">
            <summary>
            根据宽剪切
            </summary>
        </member>
        <member name="F:SyntacticSugar.UploadImage.CutMode.CutH">
            <summary>
            根据高剪切
            </summary>
        </member>
        <member name="F:SyntacticSugar.UploadImage.CutMode.CutNo">
            <summary>
            缩放不剪裁
            </summary>
        </member>
        <member name="M:SyntacticSugar.UploadImage.ResponseMessage.SmallPath(System.Int32)">
            <summary>
            缩略图路径
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.ResponseMessage.IsError">
            <summary>
            是否遇到错误
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.ResponseMessage.WebPath">
            <summary>
            web路径
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.ResponseMessage.filePath">
            <summary>
            文件物理路径
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.ResponseMessage.Message">
            <summary>
            反回消息
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.ResponseMessage.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.ResponseMessage.FileName">
            <summary>
            图片名
            </summary>
        </member>
        <member name="P:SyntacticSugar.UploadImage.ResponseMessage.Directory">
            <summary>
            图片目录
            </summary>
        </member>
        <member name="T:SyntacticSugar.RequestToModel">
            <summary>
            ** 描述：表单帮助类
            ** 创始时间：2015-4-17
            ** 修改时间：-
            ** 作者：sunkaixuan
            ** qq：610262374 欢迎交流,共同提高 ,命名语法等写的不好的地方欢迎大家的给出宝贵建议
            ** 使用说明：http://www.cnblogs.com/sunkaixuan/p/4532558.html
            </summary>
        </member>
        <member name="M:SyntacticSugar.RequestToModel.GetSingleForm``1">
            <summary>
            提交表单通过反射获取单个像
            注意：表单控件name必包含对应类中的第一个字段，否则将报错
            </summary>
        </member>
        <member name="M:SyntacticSugar.RequestToModel.GetSingleForm``1(System.String)">
            <summary>
            提交表单通过反射获取单个像
            注意：表单控件name必包含对应类中的第一个字段，否则将报错
            <param name="appstr">控件前缀,比如 name="form1.sex" appstr可以设为form1</param>
            </summary>
        </member>
        <member name="M:SyntacticSugar.RequestToModel.GetListByForm``1">
            <summary>
            提交表单通过反射获取多个对像
            注意：表单控件name必包含对应类中的第一个字段，否则将报错
            </summary>
            <typeparam name="type"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.RequestToModel.GetListByForm``1(System.String)">
            <summary>
            提交表单通过反射获取多个对像
            注意：表单控件name必包含对应类中的第一个字段，否则将报错
            </summary>
            <typeparam name="type"></typeparam>
            <param name="appstr">控件前缀,比如 name="form1.sex" appstr可以设为form1</param>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.RequestToModel.GetListByForm``1(System.String,System.Int32)">
            <summary>
            提交表单通过反射获取多个对像
            </summary>
            <typeparam name="type"></typeparam>
            <param name="appstr">控件前缀,比如 name="form1.sex" appstr可以设为form1</param>
            <typeparam name="index">表单控件中第一个控件，对应类中字段在该类中的索引号,特殊情况可以是第二第三控件</typeparam>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.EnumSugarExtenions.GetAttributeValue(System.Enum)">
            <summary>
            获得枚举字段的特性(Attribute)，该属性不允许多次定义。
            </summary>
        </member>
        <member name="M:SyntacticSugar.EnumSugarExtenions.GetAttribute``1(System.Enum)">
            <summary>
            获得枚举字段的特性(Attribute)，该属性不允许多次定义。
            </summary>
        </member>
        <member name="M:SyntacticSugar.EnumSugarExtenions.GetName(System.Enum)">
            <summary>
            获得枚举字段的名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:SyntacticSugar.EnumSugarExtenions.GetValue``1(System.Enum)">
            <summary>
            获得枚举字段的值。
            </summary>
            <returns></returns>
        </member>
        <member name="T:SyntacticSugar.Desc">
            <summary>
            字段或属性的中文解释属性
            </summary>
        </member>
        <member name="M:SyntacticSugar.Desc.#ctor(System.String)">
            <summary>
            初始化创建一个 <see cref="T:SyntacticSugar.Desc"/> 类的实例, 用于指示字段或属性的解释说明.
            </summary>
            <param name="value">字段或属性的解释说明.</param>
        </member>
        <member name="P:SyntacticSugar.Desc.Value">
            <summary>
            获得字段或属性的中文解释.
            </summary>
            <value>字段或属性的中文解释.</value>
        </member>
    </members>
</doc>
